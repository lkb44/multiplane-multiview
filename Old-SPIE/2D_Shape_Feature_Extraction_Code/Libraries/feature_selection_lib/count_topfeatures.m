function [count, featInds] = count_topfeatures(topfeatinds,featInds,sorting,nz)
%%
% INPUTS
    % topfeatinds = mxn matrix generated by calling:
    %               >> stats  nFold_AnyClassifier_withFeatureselection(...)
    %               >> topfeatinds = cat(1,stats.topfeatinds) after running 
    %               n represents the number of top features selected for
    %               m represents the total number of times feature selection was done (# = nFolds * nIters)
    %    featInds = (optional) 1xk vector containing indices of the feature indices to search for. DEFAULT: will just return a vector of the unique indices found in topfeatinds
    %     sorting = (optional) preference to sort the final count ('ascend','descend' DEFAULT: count not sorted (sorted by featInds))
    %          nz = (optional) preference to only return the non-zero count features (0 or 1) DEFAULT: 0
% OUTPUTS
    %  featInds = vector containing indices of feature indices included in  final count results
    %     count = 1xk vector containing count of # times each feature index appeared in topfeatinds
    %
    
%% check inputs
if nargin < 2
    featInds = unique(topfeatinds(:));
end

if nargin < 4
    nz = 0;
end

featInds = sort(featInds);

% count appearances of topfeats
count = zeros(1,length(featInds)); %initialize
for i = 1:length(featInds)
    count(i) = sum(topfeatinds(:) == featInds(i));
end

if nargin >= 3
    [count, order] = sort(count,sorting);
    featInds = featInds(order);
end

if nz
    inds2rmv = find(count==0);
    count(inds2rmv) = [];
    featInds(inds2rmv) = [];
end
